/* -------------------------------------------------------------------
 Java source file for the class GeoVizToolkit
 Copyright (c), 2005 Frank Hardisty
 $Author: hardisty $
 $Id: GeoVizToolkit.java,v 1.7 2005/04/04 17:52:35 hardisty Exp $
 $Date: 2005/04/04 17:52:35 $
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.
 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 -------------------------------------------------------------------   */

package edu.sc.geoviz.toolkitcore;

import java.net.URL;
import java.util.*;

import java.awt.BorderLayout;
import java.awt.Frame;
import java.awt.Image;
import java.awt.event.*;
import javax.swing.*;

import edu.psu.geovista.app.coordinator.CoordinationManager;
import edu.psu.geovista.app.coordinator.CoordinationUtils;
import edu.psu.geovista.app.coordinator.FiringBean;
import edu.psu.geovista.app.map.GeoMap;
import edu.psu.geovista.app.map.GeoMapUni;
import edu.psu.geovista.app.parvis.gui.MainPanel;
import edu.psu.geovista.app.spreadsheet.SpreadSheetBean;
import edu.psu.geovista.app.table.TableBrowser;
import edu.psu.geovista.app.touchgraph.LinkGraph;
import edu.psu.geovista.app.touchgraph.SubspaceLinkGraph;
import edu.psu.geovista.data.condition.ConditionManager;
import edu.psu.geovista.data.geog.DataSetForApps;
import edu.psu.geovista.data.geog.DataSetModifiedBroadcaster;
import edu.psu.geovista.data.sample.GeoData48States;
import edu.psu.geovista.data.shapefile.ShapeFileDataReader;
import edu.psu.geovista.data.shapefile.ShapeFileProjection;
import edu.psu.geovista.sound.SonicClassifier;
import edu.psu.geovista.ui.animation.IndicationAnimator;
import edu.psu.geovista.ui.animation.SelectionAnimator;
import edu.psu.geovista.ui.event.DataSetEvent;
import edu.psu.geovista.ui.event.DataSetListener;
import edu.sc.geoviz.data.GeoDataCartogram;
import edu.sc.geoviz.data.GeoDataSCarolina;
import edu.sc.geoviz.rjava.DataSetBroadcaster;
import edu.sc.geoviz.star.StarPlot;
import edu.sc.geoviz.matrix.MapAndScatterplotMatrix;
import edu.sc.geoviz.treemap.TreeMap;
import edu.psu.geovista.app.spacefill.SpaceFill;
import edu.sc.geoviz.matrix.TreemapAndScatterplotMatrix;
import java.awt.Component;
import edu.sc.geoviz.data.GeoDataSCarolinaCities;

import java.awt.Color;
import edu.sc.geoviz.matrix.MapScatterplotTreemapMatrix;

/*
 Assumptions:
 1. One dataset at a time.
 2. Maximum coordination as a default.



 */


public class GeoVizToolkit
    extends JFrame implements ActionListener, ComponentListener,
    DataSetListener {

  //collection of classes to add
  ArrayList toolMenuList = new ArrayList();
  HashMap toolClassHash = new HashMap();
  //collection of active beans
  ToolkitBeanSet tBeanSet = new ToolkitBeanSet();

  // Create JDesktopPane to hold the internal frame
  JDesktopPane desktop = new JDesktopPane();

  //managing our layouts

  String filePath = "";
  JFileChooser fileChooser;
  ShapeFileDataReader shpRead = new ShapeFileDataReader();
  ShapeFileProjection shpProj = new ShapeFileProjection();
  DataSetBroadcaster dataCaster = new DataSetBroadcaster();
  CoordinationManager coord = new CoordinationManager();
  DataSetForApps dataSet;
  Vector backgroundDataSets; //every item in this should be a DataSetForApps
  JMenuBar jMenuBar1 = new JMenuBar();
  JMenu menuFile = new JMenu();
  JMenuItem menuItemLoadShp = new JMenuItem();

  JMenu menuAddTool = new JMenu();
  JMenuItem menuItemLoadStates = new JMenuItem();
  JMenuItem menuItemLoadSC = new JMenuItem();
  JMenuItem menuItemLoadSCCities = new JMenuItem();
  JMenuItem menuItemLoadCartogram = new JMenuItem();
  JMenuItem menuItemLoadBackgroundShape = new JMenuItem();
  JMenuItem menuItemLoadSCBackgroundShape = new JMenuItem();
  JMenu menuRemoveTool = new JMenu();
  JMenuItem menuItemRemoveAllTools = new JMenuItem();
  JMenu menuAbout = new JMenu();
  JMenu menuHelp = new JMenu();
  JMenuItem menuItemAboutGeoviz = new JMenuItem();
  JMenuItem menuItemAboutGeoVista = new JMenuItem();
  JMenuItem menuItemHelp = new JMenuItem();
  JMenuItem menuItemOpenLayout = new JMenuItem();
  JMenuItem menuItemSaveLayout = new JMenuItem();
  JMenuItem menuItemExit = new JMenuItem();

  USCHelp help;

  boolean useProj;
  public GeoVizToolkit(String fileNameIn) {
    new GeoVizToolkit(fileNameIn, false, true);
  }

  public GeoVizToolkit(String fileNameIn, boolean useProj, boolean useAux) {

    super("GeoViz Toolkit");
    int[] someInts = {1,2,3};
    System.out.println(someInts.getClass().getName());
    this.desktop.setBackground(new Color(20,20,80));
    this.useProj = useProj;
    this.getContentPane().add(desktop, BorderLayout.CENTER);
    coord.addBean(this.dataCaster);
    try {
      this.jbInit();
      this.initMenuListeners();
    }
    catch (Exception ex1) {
      ex1.printStackTrace();
    }

    if (fileNameIn == null || fileNameIn.equals("")) {
      fileNameIn = "SCCities";
    }

    this.loadData(fileNameIn);


    URL urlGif = null;

    ImageIcon im = null;
    try {
      Class cl = this.getClass();
      urlGif = cl.getResource("resources/geoviz_toolkit32.gif");
      im = new ImageIcon(urlGif);

    }
    catch (Exception ex) {
      ex.printStackTrace();
    }

    this.setIconImage(im.getImage());

    this.show();
    this.setExtendedState(Frame.MAXIMIZED_BOTH);

    this.tBeanSet = ToolkitLayoutIO.openDefaultLayout();
    this.addToolkitBeanSet(this.tBeanSet);

    //File fi = new File(this.filePath);

    //this.filePath = fi.getPath();
    this.loadBackgroundData("SC");
    this.repaint();
  }

  public void addExternalBean(Object bean) {
    this.coord.addBean(bean);
    //XXX total hack for demo
    DataSetModifiedBroadcaster localCaster = (DataSetModifiedBroadcaster)
        bean;
    DataSetForApps dataSetOut = shpProj.getOutputDataSetForApps();
    System.out.println("geovizdemo, addBean, dataSetIsNull =" + (dataSetOut == null));
    localCaster.setDataSet(dataSetOut);
  }

  /*
   deleting all beans

   */

  public void removeAllBeans() {
    Iterator it = this.tBeanSet.iterator();
    while (it.hasNext()) {
      ToolkitBean oldBean = (ToolkitBean) it.next();
      this.removeBeanFromGui(oldBean);
      oldBean = null;
    }
    this.tBeanSet.clear();

  }

  /*
    deleting named bean

   */

  public void deleteBean(ToolkitBean oldBean) {
    this.removeBeanFromGui(oldBean);
    this.tBeanSet.remove(oldBean);
    oldBean = null;
  }

  /*
   cleanup
   * 1. remove item from remove menu
     2. remove from map of beans
     3. remove from coordination
     4. remove from GUI
       (should be no more references at this point, besides in tBeanSet)
   */
  private void removeBeanFromGui(ToolkitBean oldBean) {
    JMenuItem item = oldBean.getRemoveMenuItem();
    item.removeActionListener(this);
    this.menuRemoveTool.remove(item);
    this.coord.removeBean(oldBean.getOriginalBean());

    //find area in layout occupied by internal frame
    JInternalFrame iFrame = oldBean.getInternalFrame();
    int iX = iFrame.getX();
    int iY = iFrame.getY();
    int iWidth = iFrame.getWidth();
    int iHeight = iFrame.getHeight();
    //remove it, then repaint area
    this.desktop.remove(oldBean.getInternalFrame());
    this.desktop.repaint(iX, iY, iWidth, iHeight);

  }

  public static Object makeObject(String className) {
    Object obj = null;
    try {
      System.out.println();
      Class beanClass = Class.forName(className);
      obj = beanClass.newInstance();
    }
    catch (Exception ex) {
      ex.printStackTrace();
    }
    return obj;
  }

  /* one reason this method is called when a bean is instantiated because the user
   has clicked on the appropriate menu item. If a bean is instantiated because we
     have loaded a layout, then the method in ToolkitLayoutIO is used.
   */
  private ToolkitBean instantiateBean(String className) {

    Class beanClass = null;
    ToolkitBean newToolkitBean = null;
    JInternalFrame bInterFrame = null;

    Object newBean = GeoVizToolkit.makeObject(className);
    FiringBean newFBean = coord.addBean(newBean);
    String uniqueName = newFBean.getBeanName();

    newToolkitBean = new ToolkitBean(newBean, uniqueName);

    bInterFrame = newToolkitBean.getInternalFrame();
    //############################################################################//
    //TODO: replace with something a bit less "by hand"
    //maybe use the bean's peferredSize if they are a java.awt.Component
    bInterFrame.setLocation(25 * tBeanSet.size(), 25 * tBeanSet.size());

    int place = className.lastIndexOf(".");
    int length = className.length();
    String shortClassName = className.substring(place + 1, length);

    if (shortClassName.equalsIgnoreCase("LinkGraph")) {
      bInterFrame.setSize(450, 450);
    }
    else if (shortClassName.equalsIgnoreCase("StarPlot")) {
      bInterFrame.setSize(400, 400);
    }
    else if (shortClassName.equalsIgnoreCase("SubspaceLinkGraph")) {
      bInterFrame.setSize(500, 450);
    }
    else if (shortClassName.equalsIgnoreCase("TableBrowser")) {
      bInterFrame.setSize(670, 530);
    }
    else if (shortClassName.equalsIgnoreCase("SonicClassifier")) {
      //Ke: ######SONICCLASSIFIER COULD MAKE THE PROGRAM DEAD IN ABSENCE OF SOUND DEVICE
      //Frank: sound devices depend on the presence of a "soundbank.gm" file,
      //which is avialble as a resource from edu.psu.geovista.sound.resources

      bInterFrame.setSize(350, 100);
    }
    else if (shortClassName.equalsIgnoreCase("SelectionAnimator")) {
      bInterFrame.setSize(885, 100);
    }
    else if (shortClassName.equalsIgnoreCase("IndicationAnimator")) {
      bInterFrame.setSize(780, 100);
//############################################################################//

    }
    //newToolkitBean.setInternalFrame(bInterFrame);
    return newToolkitBean;
  }

  /*
   adds bean to coordinator.
   *Adds bean to the main gui area, also to the remove bean menu
   *
   */
  private void addBeanToGui(ToolkitBean newToolkitBean) {

    desktop.add(newToolkitBean.getInternalFrame(), 0); //add on top
    newToolkitBean.addComponentListener(this);
    JMenuItem item = newToolkitBean.getRemoveMenuItem();
    item.addActionListener(this);

    this.menuRemoveTool.add(item, 0); //add at the top

    Object newBean = newToolkitBean.getOriginalBean();
    if (newBean instanceof DataSetListener) {
      DataSetListener dataListener = (DataSetListener) newBean;
      dataListener.dataSetChanged(new DataSetEvent(this,
          this.dataSet.getDataObjectOriginal()));

    }

  }

  private void addToolkitBeanSet(ToolkitBeanSet beanSet) {
    this.tBeanSet = beanSet;
    Iterator iter = tBeanSet.iterator();
    while (iter.hasNext()) {
      ToolkitBean tBean = (ToolkitBean) iter.next();
      Object obj = tBean.getOriginalBean();
      this.coord.addBean(obj);
      this.addBeanToGui(tBean);

    }

  }

  public void dataSetChanged(DataSetEvent e) {
    this.dataSet = new DataSetForApps(e.getDataSet());
  }

  private void showHelp() {
    //lazy initialize
    if (this.help == null) {
      this.help = new USCHelp();
      this.help.pack();
    }
    boolean haveHelp = false;
    Component[] desktopComponents = desktop.getComponents();
    for (int i = 0; i < desktopComponents.length; i++) {
      if (desktopComponents[i] == this.help) {
        desktop.remove(desktopComponents[i]);
        desktop.add(desktopComponents[i], 0);
        haveHelp = true;
      }
    }
    if (!haveHelp) {
      System.out.println("GVToolkit, showhelp, adding to desktop");
      desktop.add(this.help, 0); //add on top
    }
    this.repaint();

  }

  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == this.menuItemAboutGeoVista) {

      JOptionPane.showMessageDialog(this,
                                    "Most components in this toolkit " +
                                    "developed at the GeoVISTA Center.");

    }
    else if (e.getSource() == this.menuItemAboutGeoviz) {

      JOptionPane.showMessageDialog(this,
                                    "This application developed by " +
                                    "Frank Hardisty, Ke Liao, and Aaron Myers " +
                                    "at the Univerisity of South Carolina.");
    }
    else if (e.getSource() == this.menuItemHelp) {
      this.showHelp();
    }
    else if (e.getSource() == this.menuItemExit) {
      //is this too harsh?
      System.exit(0);
    }
    else if (e.getSource() == this.menuItemLoadSC) {
      this.loadData("SC");
    }
    else if (e.getSource() == this.menuItemLoadSCCities) {
      this.loadData("SCCities");

    }
    else if (e.getSource() == this.menuItemLoadShp) {
      this.openShapefilePicker();
    }
    else if (e.getSource() == this.menuItemLoadStates) {
      this.loadData("48States");
    }
    else if (e.getSource() == this.menuItemLoadCartogram) {
      this.loadData("Cartogram");
    }
    else if (e.getSource() == this.menuItemLoadBackgroundShape) {
      this.openBackgroundShapeFilePicker();
    }
    else if (e.getSource() == this.menuItemLoadSCBackgroundShape) {
      this.loadBackgroundData("SC");
    }

    else if (e.getSource() == this.menuItemOpenLayout) {

      ToolkitBeanSet tempBeanSet = ToolkitLayoutIO.openLayout(this);
      if (tempBeanSet == null) {
        return;
      }
      this.removeAllBeans();
      this.addToolkitBeanSet(tempBeanSet);

    }
    else if (e.getSource() == this.menuItemSaveLayout) {

      ToolkitLayoutIO.writeLayout(this.getFileName(), this.tBeanSet, this);

    }
    else if (this.toolClassHash.containsKey(e.getSource())) { //one of our added classes
      String className = (String) toolClassHash.get(e.getSource());

      ToolkitBean tBean = this.instantiateBean(className);
      this.addBeanToGui(tBean);
      this.tBeanSet.add(tBean);

    }

    else if (e.getSource() == this.menuItemRemoveAllTools) {
      this.removeAllBeans();
    }
    else if (e.getSource() instanceof JMenuItem &&
             tBeanSet.contains( (JMenuItem) e.getSource())) {
      JMenuItem item = (JMenuItem) e.getSource();

      ToolkitBean oldTool = this.tBeanSet.getToolkitBean(item);
      assert (item != null);
      this.deleteBean(oldTool); //deleteBean calls removeBeanFromGUI
      oldTool = null; //or should we just let it go out of scope? or do we need to do more?

    }

  }

  private void loadBackgroundData(String name) {
    Object[] newDataSet = this.createData(name);
    this.dataCaster.fireAuxiliaryDataSet(newDataSet);
  }

  public void loadData(String name) {
    Object[] newDataSet = this.createData(name);

    this.dataSet = new DataSetForApps(newDataSet);
    this.dataCaster.setAndFireDataSet(newDataSet);

  }

  private Object[] createData(String name) {
    if (name == null) {
      return null;
    }
    Object[] newDataSet = null;
    if (name.equals("48States")) {
      GeoData48States statesData = new GeoData48States();
      Object[] tempDataSet = statesData.getDataSet();

      newDataSet = shpRead.convertShpToShape(tempDataSet);
      this.shpProj.setInputDataSet(newDataSet);
      newDataSet = this.shpProj.getOutputDataSet();
    }
    else if (name.equals("SC")) {
      GeoDataSCarolina carolinaData = new GeoDataSCarolina();
      Object[] tempDataSet = carolinaData.getDataSet();
      newDataSet = shpRead.convertShpToShape(tempDataSet);

    }
    else if (name.equals("SCCities")) {
      GeoDataSCarolinaCities carolinaData = new GeoDataSCarolinaCities();
      Object[] tempDataSet = carolinaData.getDataSet();
      newDataSet = shpRead.convertShpToShape(tempDataSet);

    }
    else if (name.equals("Cartogram")) {
      GeoDataCartogram cartogramData = new GeoDataCartogram();
      Object[] tempDataSet = cartogramData.getDataSet();
      newDataSet = shpRead.convertShpToShape(tempDataSet);

    }
    else {
      shpRead.setFileName(name);
      if (this.useProj) {
        this.shpProj.setInputDataSet(shpRead.getDataSet());
        newDataSet = shpProj.getOutputDataSet();
      }
      else {
        newDataSet = shpRead.getDataSet();
      }
    }

    return newDataSet;

  }

  private void openShapefilePicker() {

    String fileName = ToolkitLayoutIO.getFileName(this,
                                                  ToolkitLayoutIO.ACTION_OPEN,
                                                  ToolkitLayoutIO.
                                                  FILE_TYPE_SHAPEFILE);

    this.loadData(fileName);
  }

  private void openBackgroundShapeFilePicker() {
    String fileName = ToolkitLayoutIO.getFileName(this,
                                                  ToolkitLayoutIO.ACTION_OPEN,
                                                  ToolkitLayoutIO.
                                                  FILE_TYPE_SHAPEFILE);

    this.loadBackgroundData(fileName);
    System.out.println("Background name = " + fileName);

  }

  /*flow of tool added to menu:
     add JMenuItem with appropriate name and icon to menu
     add app as a listener to JMenuItem
     add entry in ListArray of added menu tools
   */
  private void addToolToMenu(Class tool) {

    String className = tool.getName();
    int place = className.lastIndexOf(".") + 1;
    int len = className.length();
    String shortName = className.substring(place, len);
    Image im = CoordinationUtils.findSmallIcon(tool);
    Icon ic = new ImageIcon(im);
    JMenuItem item = new JMenuItem(shortName, ic);
    this.menuAddTool.add(item); //the menu
    item.addActionListener(this);
    this.toolClassHash.put(item, className); //the menuItem is the key, the classname the value
    this.toolMenuList.add(item);

  }

  public String getFileName() {
    return this.filePath;
  }

  //start component event handling
  public void componentHidden(ComponentEvent e) {
    if (e.getSource() instanceof JInternalFrame &&
        this.tBeanSet.contains( (JInternalFrame) e.getSource())) {
      this.deleteBean(this.tBeanSet.getToolkitBean( (JInternalFrame) e.
          getSource()));

    }

  }

  public void componentMoved(ComponentEvent e) {
    //System.out.println("moved");
  }

  public void componentShown(ComponentEvent e) {

    //System.out.println("shown");}
  }

  public void componentResized(ComponentEvent e) {
    if (e.getSource() instanceof JInternalFrame &&
        this.tBeanSet.contains( (JInternalFrame) e.getSource())) {
      JInternalFrame iFrame = (JInternalFrame) e.getSource();
      int width = iFrame.getWidth();
      int height = iFrame.getHeight();
      //System.out.println("iFrame.width = " + width + ",iFrame.height" + height);

    }
  }

  //end component event handling
  private void initMenuListeners() {

    this.menuItemAboutGeoVista.addActionListener(this);
    this.menuItemAboutGeoviz.addActionListener(this);
    this.menuItemExit.addActionListener(this);
    this.menuItemLoadSC.addActionListener(this);
    this.menuItemLoadSCCities.addActionListener(this);
    this.menuItemLoadShp.addActionListener(this);
    this.menuItemLoadCartogram.addActionListener(this);
    this.menuItemLoadBackgroundShape.addActionListener(this);
    this.menuItemLoadSCBackgroundShape.addActionListener(this);
    this.menuItemLoadStates.addActionListener(this);
    this.menuItemOpenLayout.addActionListener(this);
    this.menuItemSaveLayout.addActionListener(this);
    this.menuItemRemoveAllTools.addActionListener(this);
    this.menuItemHelp.addActionListener(this);

    addToolToMenu(GeoMap.class);
    addToolToMenu(LinkGraph.class);
    addToolToMenu(SubspaceLinkGraph.class);
    addToolToMenu(MainPanel.class);
    addToolToMenu(TableBrowser.class);
    addToolToMenu(GeoMapUni.class);
    addToolToMenu(SonicClassifier.class);
    addToolToMenu(StarPlot.class);
    addToolToMenu(SelectionAnimator.class);
    addToolToMenu(IndicationAnimator.class);
    addToolToMenu(ConditionManager.class);
    addToolToMenu(VariablePicker.class);
    addToolToMenu(SpreadSheetBean.class);
    addToolToMenu(GeoMap.class);
    addToolToMenu(TreeMap.class);
    addToolToMenu(MapAndScatterplotMatrix.class);
    addToolToMenu(TreemapAndScatterplotMatrix.class);
    addToolToMenu(MapScatterplotTreemapMatrix.class);

  }

  private void jbInit() throws Exception {
    this.setJMenuBar(jMenuBar1);
    menuFile.setText("File");
    menuItemLoadShp.setText("Load Shapefile from disk");
    menuAddTool.setText("Add Tool");
    menuItemLoadStates.setText("Load U.S. State Data");
    menuItemLoadSC.setText("Load South Carolina County Data");
    menuItemLoadSCCities.setText("Load South Carolina City Data");
    menuItemLoadCartogram.setText("Load Population Cartogram");
    menuRemoveTool.setText("Remove Tool");
    menuAbout.setText("About");
    menuHelp.setText("Help");
    menuItemAboutGeoviz.setText("About GeoViz Toolkit");
    menuItemAboutGeoVista.setText("About GeoVISTA Studio");
    menuItemHelp.setText("Tutorial");
    menuItemOpenLayout.setText("Open Layout");
    menuItemSaveLayout.setText("Save Layout");
    menuItemLoadBackgroundShape.setText("Load Background Map from disk");
    menuItemLoadSCBackgroundShape.setText("Load South Carolina Background");
    jMenuBar1.add(menuFile);
    jMenuBar1.add(menuAddTool);
    jMenuBar1.add(menuRemoveTool);
    jMenuBar1.add(menuAbout);
    jMenuBar1.add(menuHelp);
    menuFile.add(menuItemLoadShp);
    menuFile.add(menuItemLoadStates);
    menuFile.add(menuItemLoadSC);
    menuFile.add(menuItemLoadSCCities);
    menuFile.add(menuItemLoadCartogram);
    menuFile.addSeparator();
    menuFile.add(menuItemLoadBackgroundShape);
    menuFile.add(menuItemLoadSCBackgroundShape);

    menuFile.addSeparator();

    menuFile.add(menuItemOpenLayout);
    menuFile.add(menuItemSaveLayout);
    menuFile.addSeparator();
    menuAbout.add(menuItemAboutGeoviz);
    menuAbout.add(menuItemAboutGeoVista);
    menuHelp.add(menuItemHelp);
    menuRemoveTool.addSeparator();
    menuItemRemoveAllTools.setText("Remove All Tools");
    menuRemoveTool.add(this.menuItemRemoveAllTools);
  }

  public static void main(String[] args) {
    boolean useResource = true;
    boolean useProj = false;
    boolean useAux = true;

    //    try {
    //      UIManager.setLookAndFeel(
    //          new edu.psu.geovista.ui.plaf.kunststoff.KunststoffLookAndFeel());
    //    } catch (UnsupportedLookAndFeelException ex) {
    //      ex.printStackTrace();
    //    }
    //System.out.println("starting.....");
    //System.out.println("java.version = " + System.getProperty("java.version"));

    int argsLen = args.length;
    String fileName = null;

    if (args.length == 0) {
      //fileName = "c:\\temp\\shapefiles\\ca_cities.shp";
      fileName = "";
    }
    else {
      fileName = args[0];
    }
    //fileName = "D:\\publications\\atpm\\Export_Output4.shp";
    //fileName = "D:\\courses\\geog 741\\charlie\\richlex_zone63_diss2.shp";
    //fileName = "C:\\temp\\states48.shp";
    //fileName = "C:\\temp\\county\\county.shp";

    if (args.length >= 2) {
      String arg2 = args[1];

      if (arg2.compareToIgnoreCase("false") == 0) {
        useProj = false;
      }
    }

    GeoVizToolkit app = new GeoVizToolkit(fileName, useProj, useAux);

    //app.show();
    //app.setExtendedState(JFrame.MAXIMIZED_BOTH);

//app.setSize(1024,768);
    //JFrame app = new JFrame("Map with TouchGraph");
    app.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        System.exit(0);
      }
    });

  }

}
